/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

// --- Request body types based on OpenAPI YAML ---

/**
 * Request body for /search.
 * Used to search for solar services using an intent descriptor (e.g., service name).
 * 
 * context: Mostly static request metadata (domain, action, location, etc).
 * message: User-defined search intent (e.g., service name).
 */
export interface SearchRequestBody {
    context: {
        domain: string;
        action: string;
        location: {
            country: { code: string };
            city: { code: string };
        };
        version: string;
        bap_id: string;
        bap_uri: string;
        bpp_id: string;
        bpp_uri: string;
        transaction_id: string;
        message_id: string;
        timestamp: string;
    };
    message: {
        intent: {
            descriptor: {
                name: string;
            };
        };
    };
}

/**
 * Request body for /select.
 * Used to select a provider and items for a solar service.
 * 
 * context: Mostly static request metadata (domain, action, location, etc).
 * message: User-defined selection (provider and items).
 */
export interface SelectRequestBody {
    context: {
        domain: string;
        action: string;
        location: {
            country: { code: string };
            city: { code: string };
        };
        version: string;
        bap_id: string;
        bap_uri: string;
        bpp_id: string;
        bpp_uri: string;
        transaction_id: string;
        message_id: string;
        timestamp: string;
    };
    message: {
        order: {
            provider: { id: string };
            items: Array<{ id: string }>;
        };
    };
}

/**
 * Request body for /init.
 * Used to initialize an order for a selected solar service.
 * 
 * context: Mostly static request metadata (domain, action, location, etc).
 * message: User-defined order details (provider and items).
 */
export interface InitRequestBody {
    context: {
        domain: string;
        action: string;
        location: {
            country: { code: string };
            city: { code: string };
        };
        version: string;
        bap_id: string;
        bap_uri: string;
        bpp_id: string;
        bpp_uri: string;
        transaction_id: string;
        message_id: string;
        timestamp: string;
    };
    message: {
        order: {
            provider: { id: string };
            items: Array<{ id: string }>;
        };
    };
}

/**
 * Request body for /confirm.
 * Used to confirm an order, including customer fulfillment details.
 * 
 * context: Mostly static request metadata (domain, action, location, etc).
 * message: User-defined order confirmation (provider, items, fulfillments).
 */
export interface ConfirmRequestBody {
    context: {
        domain: string;
        action: string;
        location: {
            country: { code: string };
            city: { code: string };
        };
        version: string;
        bap_id: string;
        bap_uri: string;
        bpp_id: string;
        bpp_uri: string;
        transaction_id: string;
        message_id: string;
        timestamp: string;
    };
    message: {
        order: {
            provider: { id: string };
            items: Array<{ id: string }>;
            fulfillments: Array<{
                id: string;
                customer: {
                    person: { name: string };
                    contact: { phone: string; email: string };
                };
            }>;
        };
    };
}

/**
 * Request body for /status.
 * Used to check the status of an order by order_id.
 * 
 * context: Mostly static request metadata (domain, action, location, etc).
 * message: User-defined order_id to check status.
 */
export interface StatusRequestBody {
    context: {
        domain: string;
        action: string;
        location: {
            country: { code: string };
            city: { code: string };
        };
        version: string;
        bap_id: string;
        bap_uri: string;
        bpp_id: string;
        bpp_uri: string;
        transaction_id: string;
        message_id: string;
        timestamp: string;
    };
    message: {
        order_id: string;
    };
}

/**
 * API paths for solar service operations.
 * Each path corresponds to a specific operation in the solar service workflow.
 */
export interface paths {
    /**
     * POST /search
     * Search for solar services using an intent descriptor.
     */
    "/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Search */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": SearchRequestBody;
                };
            };
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    /**
     * POST /select
     * Select a provider and items for a solar service.
     */
    "/select": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Select */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": SelectRequestBody;
                };
            };
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    /**
     * POST /init
     * Initialize an order for a selected solar service.
     */
    "/init": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Init */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": InitRequestBody;
                };
            };
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    /**
     * POST /confirm
     * Confirm an order, including customer fulfillment details.
     */
    "/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Confirm */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": ConfirmRequestBody;
                };
            };
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    /**
     * POST /status
     * Check the status of an order by order_id.
     */
    "/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Status */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": StatusRequestBody;
                };
            };
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: never;
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
